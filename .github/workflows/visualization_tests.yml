name: Visualization Testing

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/ui/charts/**'
      - 'src/ui/visualizations/**'
      - 'tests/visual/**'
      - 'tests/unit/test_visualization_*.py'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/ui/charts/**'
      - 'src/ui/visualizations/**'
      - 'tests/visual/**'

jobs:
  test-visualizations:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
        qt-version: ['6.5.0', '6.6.0']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 x11-utils
        # Set up virtual display for headless testing
        sudo apt-get install -y xvfb
        export DISPLAY=:99
        sudo Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install pytest-xvfb  # For Linux headless testing
        
    - name: Create test directories
      run: |
        mkdir -p tests/visual_baselines
        mkdir -p tests/results
        mkdir -p tests/visual/failures
        
    - name: Run unit tests
      run: |
        pytest tests/unit/test_visualization_framework.py -v --tb=short
        
    - name: Run visual regression tests
      env:
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || '' }}
      run: |
        pytest tests/visual -v -m visual --tb=short
        
    - name: Run performance tests
      run: |
        pytest tests/performance -v -m performance --benchmark-only
        
    - name: Run accessibility tests
      run: |
        pytest tests/unit -v -k "accessibility" --tb=short
        
    - name: Run integration tests
      run: |
        pytest tests/integration/test_visualization_integration.py -v --tb=short
        
    - name: Generate test report
      if: always()
      run: |
        pytest --html=tests/results/report.html --self-contained-html
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}-qt${{ matrix.qt-version }}
        path: |
          tests/results/
          tests/visual/failures/
          
    - name: Upload visual regression baselines
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10' && matrix.qt-version == '6.5.0'
      uses: actions/upload-artifact@v3
      with:
        name: visual-baselines
        path: tests/visual_baselines/
        
  coverage:
    needs: test-visualizations
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install coverage pytest-cov
        
    - name: Run tests with coverage
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        pytest tests/visual tests/unit/test_visualization_*.py --cov=src/ui/charts --cov=src/ui/visualizations --cov-report=html --cov-report=xml
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: visualizations
        name: visualization-coverage
        
    - name: Check coverage threshold
      run: |
        coverage report --fail-under=90
        
  visual-diff:
    if: github.event_name == 'pull_request'
    needs: test-visualizations
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Download current baselines
      uses: actions/download-artifact@v3
      with:
        name: visual-baselines
        path: tests/visual_baselines_new/
        
    - name: Checkout main branch baselines
      run: |
        git checkout origin/main -- tests/visual_baselines/
        
    - name: Compare baselines
      run: |
        python tests/visual/compare_baselines.py tests/visual_baselines/ tests/visual_baselines_new/
        
    - name: Upload visual diffs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: visual-diffs
        path: tests/visual_diffs/
        
  accessibility-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install axe-selenium-python pytest-accessibility
        
    - name: Run accessibility audit
      run: |
        python tests/accessibility/audit_visualizations.py
        
    - name: Upload accessibility report
      uses: actions/upload-artifact@v3
      with:
        name: accessibility-report
        path: tests/results/accessibility_report.html