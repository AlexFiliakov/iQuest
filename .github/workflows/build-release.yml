name: Build Windows Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: false
        type: string

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install pyinstaller
      
      - name: Run tests
        run: |
          pytest tests/unit/ -v --no-header
        continue-on-error: true  # Don't fail build if tests fail (for now)
      
      - name: Extract version
        id: get_version
        shell: pwsh
        run: |
          if ("${{ github.event.inputs.version }}" -ne "") {
            $version = "${{ github.event.inputs.version }}"
          } elseif ($env:GITHUB_REF -match "^refs/tags/v(.+)$") {
            $version = $matches[1]
          } else {
            # Extract from version.py
            $content = Get-Content "src/version.py"
            $versionLine = $content | Where-Object { $_ -match '__version__\s*=\s*"([^"]+)"' }
            if ($versionLine) {
              $version = $matches[1]
            } else {
              $version = "0.1.0"
            }
          }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Building version: $version"
      
      - name: Install UPX
        shell: pwsh
        run: |
          # Download UPX for Windows
          $upxVersion = "4.2.2"
          $upxUrl = "https://github.com/upx/upx/releases/download/v$upxVersion/upx-$upxVersion-win64.zip"
          Invoke-WebRequest -Uri $upxUrl -OutFile upx.zip
          Expand-Archive -Path upx.zip -DestinationPath .
          $upxPath = Get-ChildItem -Path . -Filter "upx.exe" -Recurse | Select-Object -First 1
          $upxDir = Split-Path $upxPath.FullName -Parent
          echo "$upxDir" >> $env:GITHUB_PATH
          echo "UPX installed at: $upxDir"
      
      - name: Install NSIS
        shell: pwsh
        run: |
          # Install NSIS via Chocolatey
          choco install nsis -y
          $nsisPath = "C:\Program Files (x86)\NSIS"
          echo "$nsisPath" >> $env:GITHUB_PATH
          echo "NSIS installed at: $nsisPath"
      
      - name: Build executable
        run: |
          python build.py --version ${{ steps.get_version.outputs.VERSION }} --package
      
      - name: Create Release Notes
        id: release_notes
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $notes = @"
          ## Apple Health Monitor v$version
          
          ### Installation Options
          
          1. **Installer (Recommended)**: `HealthMonitor-$version-installer.exe`
             - Standard Windows installer
             - Creates Start Menu shortcuts
             - Includes uninstaller
          
          2. **Portable Version**: `HealthMonitor-$version-portable.zip`
             - No installation required
             - Extract and run from any location
             - Stores data next to executable
          
          3. **Standalone Executable**: `HealthMonitor.exe`
             - Single directory bundle
             - For advanced users
          
          ### System Requirements
          - Windows 10 or later
          - No Python installation required
          - ~100MB disk space
          
          ### What's New
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          "@
          
          # Write to file for artifact
          $notes | Out-File -FilePath "release_notes.md" -Encoding UTF8
          
          # Set output for GitHub
          $notes = $notes -replace "`r`n", "%0A" -replace "`n", "%0A"
          echo "NOTES=$notes" >> $env:GITHUB_OUTPUT
      
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-release-${{ steps.get_version.outputs.VERSION }}
          path: |
            build/dist/HealthMonitor-${{ steps.get_version.outputs.VERSION }}-installer.exe
            build/dist/HealthMonitor-${{ steps.get_version.outputs.VERSION }}-portable.zip
            build/dist/HealthMonitor/
            build/logs/
            release_notes.md
      
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/dist/HealthMonitor-${{ steps.get_version.outputs.VERSION }}-installer.exe
            build/dist/HealthMonitor-${{ steps.get_version.outputs.VERSION }}-portable.zip
          body: ${{ steps.release_notes.outputs.NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update README badges
        if: success()
        shell: pwsh
        run: |
          # This step would update README.md with build status badges
          # For now, just log success
          echo "Build completed successfully for version ${{ steps.get_version.outputs.VERSION }}"