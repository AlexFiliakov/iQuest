"""Comprehensive tests for weekly dashboard widget."""

import pytest
from datetime import date, datetime, timedelta
from unittest.mock import Mock, patch, MagicMock
import pandas as pd
import numpy as np
from PyQt6.QtWidgets import QApplication, QWidget
from PyQt6.QtCore import Qt, QDate, pyqtSignal
from PyQt6.QtTest import QTest

from src.ui.weekly_dashboard_widget import (
    WeeklyDashboardWidget, WeeklyOverviewCard, WeeklyTrendChart,
    WeeklyGoalTracker, WeeklyComparisonTable, WeeklyActivityHeatmap,
    WeeklyInsightsSummary
)


class TestWeeklyDashboardWidget:
    """Test weekly dashboard widget functionality."""
    
    @pytest.fixture
    def dashboard_widget(self, qtbot):
        """Create weekly dashboard widget."""
        widget = WeeklyDashboardWidget()
        qtbot.addWidget(widget)
        return widget
    
    @pytest.fixture
    def weekly_data(self):
        """Create sample weekly health data."""
        # Create 7 days of data
        start_date = datetime(2023, 1, 9)  # Monday
        dates = [start_date + timedelta(days=i) for i in range(7)]
        
        # Daily metrics with realistic weekly patterns
        steps = [8000, 9500, 7500, 10000, 8500, 12000, 6000]  # Less on Sunday
        heart_rate = [68, 70, 69, 71, 70, 72, 65]  # Higher on active days
        sleep_hours = [7.5, 7.0, 8.0, 6.5, 7.5, 8.5, 9.0]  # More on weekend
        calories = [2000, 2200, 1900, 2300, 2100, 2500, 1800]
        exercise_minutes = [30, 45, 20, 60, 40, 90, 0]  # Rest on Sunday
        
        return pd.DataFrame({
            'date': dates,
            'steps': steps,
            'heart_rate': heart_rate,
            'sleep_hours': sleep_hours,
            'calories': calories,
            'exercise_minutes': exercise_minutes
        })
    
    def test_initialization(self, dashboard_widget):
        """Test dashboard widget initialization."""
        assert isinstance(dashboard_widget, QWidget)
        assert hasattr(dashboard_widget, 'set_week')
        assert hasattr(dashboard_widget, 'load_week_data')
        assert hasattr(dashboard_widget, 'refresh')
        
    def test_week_selection(self, dashboard_widget, qtbot):
        """Test week selection functionality."""
        # Set to specific week
        week_start = QDate(2023, 1, 9)  # Monday
        dashboard_widget.set_week(week_start)
        
        # Verify week was set
        assert dashboard_widget.current_week_start == week_start
        assert dashboard_widget.current_week_end == week_start.addDays(6)
        
        # Test week change signal
        with qtbot.waitSignal(dashboard_widget.week_changed, timeout=1000):
            dashboard_widget.set_week(week_start.addDays(7))
            
    def test_data_loading(self, dashboard_widget, weekly_data, qtbot):
        """Test loading weekly data."""
        # Mock data loader
        dashboard_widget.data_loader = Mock()
        dashboard_widget.data_loader.load_week_data.return_value = weekly_data
        
        # Load data
        week_start = date(2023, 1, 9)
        dashboard_widget.load_week_data(week_start)
        
        # Wait for async operations
        qtbot.wait(100)
        
        # Verify data was loaded
        assert dashboard_widget.current_data is not None
        assert len(dashboard_widget.current_data) == 7
        
    def test_overview_cards(self, dashboard_widget, weekly_data, qtbot):
        """Test weekly overview cards."""
        dashboard_widget.update_display(weekly_data)
        
        # Check overview cards exist
        cards = dashboard_widget.findChildren(WeeklyOverviewCard)
        assert len(cards) >= 4  # At least 4 main metrics
        
        # Check total steps card
        steps_card = next((c for c in cards if c.metric_name == 'Total Steps'), None)
        assert steps_card is not None
        assert steps_card.value == sum(weekly_data['steps'])
        assert steps_card.weekly_average == sum(weekly_data['steps']) / 7
        
    def test_trend_charts(self, dashboard_widget, weekly_data, qtbot):
        """Test weekly trend charts."""
        trend_chart = dashboard_widget.trend_chart
        assert isinstance(trend_chart, WeeklyTrendChart)
        
        # Update with data
        trend_chart.update_data(weekly_data)
        
        # Check chart properties
        assert trend_chart.has_data is True
        assert len(trend_chart.metrics) > 0
        assert 'steps' in trend_chart.metrics
        
        # Test metric selection
        trend_chart.select_metric('steps')
        assert trend_chart.selected_metric == 'steps'
        
    def test_goal_tracking(self, dashboard_widget, weekly_data, qtbot):
        """Test weekly goal tracking."""
        # Set weekly goals
        goals = {
            'steps': 70000,  # 10k per day
            'exercise_minutes': 300,  # 5 hours per week
            'sleep_hours': 49  # 7 hours per day
        }
        dashboard_widget.set_weekly_goals(goals)
        
        # Update with data
        dashboard_widget.update_display(weekly_data)
        
        # Check goal tracker
        goal_tracker = dashboard_widget.goal_tracker
        assert isinstance(goal_tracker, WeeklyGoalTracker)
        
        # Verify goal progress
        steps_progress = goal_tracker.get_goal_progress('steps')
        assert steps_progress['current'] == sum(weekly_data['steps'])
        assert steps_progress['target'] == 70000
        assert steps_progress['percentage'] > 0
        
    def test_comparison_table(self, dashboard_widget, weekly_data, qtbot):
        """Test weekly comparison table."""
        comparison_table = dashboard_widget.comparison_table
        assert isinstance(comparison_table, WeeklyComparisonTable)
        
        # Mock previous week data
        prev_week_data = weekly_data.copy()
        prev_week_data['steps'] = prev_week_data['steps'] * 0.9  # 10% less
        
        comparison_table.update_comparison(weekly_data, prev_week_data)
        
        # Check comparison data
        comparison = comparison_table.get_comparison_data()
        assert 'steps' in comparison
        assert comparison['steps']['change'] > 0  # Improvement
        assert comparison['steps']['percentage'] > 0
        
    def test_activity_heatmap(self, dashboard_widget, weekly_data, qtbot):
        """Test weekly activity heatmap."""
        heatmap = dashboard_widget.activity_heatmap
        assert isinstance(heatmap, WeeklyActivityHeatmap)
        
        # Create hourly data for heatmap
        hourly_data = []
        for day_idx, day_data in weekly_data.iterrows():
            for hour in range(24):
                activity_level = 0
                if 7 <= hour <= 22:  # Active hours
                    if hour in [7, 12, 18]:  # Peak hours
                        activity_level = 3
                    else:
                        activity_level = np.random.randint(1, 3)
                        
                hourly_data.append({
                    'day': day_idx,
                    'hour': hour,
                    'activity_level': activity_level
                })
                
        heatmap.update_data(pd.DataFrame(hourly_data))
        
        # Check heatmap properties
        assert heatmap.has_data is True
        assert heatmap.get_peak_hours() == [7, 12, 18]
        assert heatmap.get_rest_hours() == list(range(0, 7)) + list(range(23, 24))
        
    def test_insights_summary(self, dashboard_widget, weekly_data, qtbot):
        """Test weekly insights summary."""
        insights_summary = dashboard_widget.insights_summary
        assert isinstance(insights_summary, WeeklyInsightsSummary)
        
        # Generate insights
        insights = insights_summary.generate_insights(weekly_data)
        assert len(insights) > 0
        
        # Check insight types
        insight_categories = [i['category'] for i in insights]
        assert 'trend' in insight_categories
        assert 'achievement' in insight_categories
        assert 'recommendation' in insight_categories
        
    def test_day_navigation(self, dashboard_widget, weekly_data, qtbot):
        """Test navigating between days within the week."""
        dashboard_widget.update_display(weekly_data)
        
        # Select specific day
        dashboard_widget.select_day(2)  # Wednesday
        
        # Check day details
        day_details = dashboard_widget.get_selected_day_details()
        assert day_details['date'] == weekly_data.iloc[2]['date']
        assert day_details['steps'] == weekly_data.iloc[2]['steps']
        
    def test_export_weekly_report(self, dashboard_widget, weekly_data, qtbot):
        """Test exporting weekly report."""
        dashboard_widget.update_display(weekly_data)
        
        # Export report
        report = dashboard_widget.export_weekly_report()
        
        assert 'week_start' in report
        assert 'week_end' in report
        assert 'summary' in report
        assert 'daily_breakdown' in report
        assert 'insights' in report
        
        # Check summary
        summary = report['summary']
        assert summary['total_steps'] == sum(weekly_data['steps'])
        assert summary['average_daily_steps'] == sum(weekly_data['steps']) / 7
        
    def test_metric_comparison_view(self, dashboard_widget, weekly_data, qtbot):
        """Test comparing multiple metrics."""
        # Enable multi-metric view
        dashboard_widget.enable_multi_metric_view(['steps', 'calories', 'exercise_minutes'])
        
        # Update display
        dashboard_widget.update_display(weekly_data)
        
        # Check correlation display
        correlations = dashboard_widget.get_metric_correlations()
        assert ('steps', 'calories') in correlations
        assert correlations[('steps', 'calories')] > 0  # Should be positively correlated
        
    def test_weekly_patterns(self, dashboard_widget, weekly_data, qtbot):
        """Test weekly pattern identification."""
        patterns = dashboard_widget.identify_weekly_patterns(weekly_data)
        
        assert 'weekday_vs_weekend' in patterns
        assert 'most_active_day' in patterns
        assert 'least_active_day' in patterns
        
        # Sunday (index 6) should be least active
        assert patterns['least_active_day'] == 'Sunday'
        
        # Friday (index 4) or Saturday (index 5) should be most active
        assert patterns['most_active_day'] in ['Friday', 'Saturday']
        
    def test_progress_indicators(self, dashboard_widget, weekly_data, qtbot):
        """Test progress indicators throughout the week."""
        dashboard_widget.update_display(weekly_data)
        
        # Check daily progress
        progress = dashboard_widget.get_daily_progress()
        assert len(progress) == 7
        
        # Monday should show as first day
        assert progress[0]['is_first_day'] is True
        
        # Check cumulative progress
        cumulative = dashboard_widget.get_cumulative_progress('steps')
        assert cumulative[0] == weekly_data.iloc[0]['steps']
        assert cumulative[6] == sum(weekly_data['steps'])
        
    def test_notification_triggers(self, dashboard_widget, weekly_data, qtbot):
        """Test notification triggers for weekly achievements."""
        dashboard_widget.notification_manager = Mock()
        
        # Set goals that will be achieved
        goals = {'steps': 50000}  # Will be exceeded
        dashboard_widget.set_weekly_goals(goals)
        
        # Update with data
        dashboard_widget.update_display(weekly_data)
        
        # Should trigger achievement notification
        dashboard_widget.notification_manager.show_weekly_achievement.assert_called()
        
    def test_week_over_week_trends(self, dashboard_widget, qtbot):
        """Test week-over-week trend analysis."""
        # Create 4 weeks of data
        weeks_data = []
        for week in range(4):
            week_start = datetime(2023, 1, 2) + timedelta(weeks=week)
            week_data = []
            for day in range(7):
                week_data.append({
                    'date': week_start + timedelta(days=day),
                    'steps': 8000 + week * 500 + np.random.randint(-1000, 1000)
                })
            weeks_data.extend(week_data)
            
        all_data = pd.DataFrame(weeks_data)
        
        # Analyze trends
        trends = dashboard_widget.analyze_multi_week_trends(all_data)
        
        assert 'trend_direction' in trends
        assert 'average_weekly_change' in trends
        assert trends['trend_direction'] == 'increasing'  # Steps increase each week
        
    def test_responsive_layout(self, dashboard_widget, qtbot):
        """Test responsive layout for different screen sizes."""
        # Test compact mode
        dashboard_widget.resize(600, 800)
        qtbot.wait(100)
        
        assert dashboard_widget.layout_mode == 'compact'
        
        # Test expanded mode
        dashboard_widget.resize(1400, 900)
        qtbot.wait(100)
        
        assert dashboard_widget.layout_mode == 'expanded'
        
        # Check component visibility
        assert dashboard_widget.activity_heatmap.isVisible()
        assert dashboard_widget.comparison_table.isVisible()
        
    def test_keyboard_shortcuts(self, dashboard_widget, qtbot):
        """Test keyboard shortcuts for week navigation."""
        initial_week = dashboard_widget.current_week_start
        
        # Previous week (Page Up)
        QTest.keyClick(dashboard_widget, Qt.Key.Key_PageUp)
        assert dashboard_widget.current_week_start < initial_week
        
        # Next week (Page Down)
        QTest.keyClick(dashboard_widget, Qt.Key.Key_PageDown)
        QTest.keyClick(dashboard_widget, Qt.Key.Key_PageDown)
        assert dashboard_widget.current_week_start > initial_week
        
        # Current week (Home)
        QTest.keyClick(dashboard_widget, Qt.Key.Key_Home)
        current_week_start = QDate.currentDate()
        current_week_start = current_week_start.addDays(-(current_week_start.dayOfWeek() - 1))
        assert dashboard_widget.current_week_start == current_week_start
        
    def test_data_caching(self, dashboard_widget, weekly_data, qtbot):
        """Test data caching for performance."""
        dashboard_widget.data_loader = Mock()
        dashboard_widget.data_loader.load_week_data.return_value = weekly_data
        
        # First load
        week_start = date(2023, 1, 9)
        dashboard_widget.load_week_data(week_start)
        first_call_count = dashboard_widget.data_loader.load_week_data.call_count
        
        # Second load of same week (should use cache)
        dashboard_widget.load_week_data(week_start)
        assert dashboard_widget.data_loader.load_week_data.call_count == first_call_count
        
        # Different week (should not use cache)
        dashboard_widget.load_week_data(week_start + timedelta(days=7))
        assert dashboard_widget.data_loader.load_week_data.call_count > first_call_count


class TestWeeklyTrendChart:
    """Test weekly trend chart component."""
    
    @pytest.fixture
    def trend_chart(self, qtbot):
        """Create trend chart."""
        chart = WeeklyTrendChart()
        qtbot.addWidget(chart)
        return chart
    
    def test_multi_metric_display(self, trend_chart, weekly_data):
        """Test displaying multiple metrics on the same chart."""
        trend_chart.add_metric('steps', weekly_data['steps'], color='blue')
        trend_chart.add_metric('calories', weekly_data['calories'], color='red', secondary_axis=True)
        
        assert len(trend_chart.metrics) == 2
        assert trend_chart.has_secondary_axis is True
        
    def test_interactive_features(self, trend_chart, weekly_data, qtbot):
        """Test interactive chart features."""
        trend_chart.update_data(weekly_data)
        
        # Hover over data point
        trend_chart.hover_point(3, 'steps')  # Thursday
        
        tooltip = trend_chart.get_tooltip()
        assert 'Thursday' in tooltip
        assert 'Steps' in tooltip
        assert '10,000' in tooltip  # Formatted value
        
    def test_zoom_pan(self, trend_chart, weekly_data):
        """Test zoom and pan functionality."""
        trend_chart.update_data(weekly_data)
        
        # Zoom in
        trend_chart.zoom(1.5)
        assert trend_chart.zoom_level == 1.5
        
        # Pan
        trend_chart.pan(1)  # Pan right by 1 day
        visible_range = trend_chart.get_visible_range()
        assert visible_range['start'] == 1
        assert visible_range['end'] == 6  # Last day might be partially visible


def test_weekly_dashboard_integration(qtbot):
    """Test complete weekly dashboard integration."""
    dashboard = WeeklyDashboardWidget()
    qtbot.addWidget(dashboard)
    
    # Create realistic weekly data
    dates = pd.date_range('2023-01-09', periods=7, freq='D')
    data = pd.DataFrame({
        'date': dates,
        'steps': [8543, 9234, 7892, 10234, 8923, 12054, 6234],
        'heart_rate': [68, 70, 69, 71, 70, 73, 65],
        'sleep_hours': [7.2, 6.8, 7.5, 6.5, 7.3, 8.2, 8.5],
        'calories': [2034, 2156, 1923, 2234, 2089, 2456, 1834]
    })
    
    # Set goals
    dashboard.set_weekly_goals({
        'steps': 70000,
        'sleep_hours': 49
    })
    
    # Update dashboard
    dashboard.update_display(data)
    
    # Verify all components are functional
    assert dashboard.current_data is not None
    assert len(dashboard.findChildren(WeeklyOverviewCard)) > 0
    assert dashboard.trend_chart.has_data is True
    assert dashboard.goal_tracker.has_goals is True
    assert dashboard.insights_summary.has_insights is True