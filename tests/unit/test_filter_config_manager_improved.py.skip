"""
Comprehensive test suite for Filter Config Manager with high coverage.
Tests configuration persistence, default handling, and JSON migration.
"""

import pytest
import json
import tempfile
import os
from datetime import date, datetime
from unittest.mock import Mock, patch, call

from src.filter_config_manager import (
    FilterConfigManager, FilterConfig
)
from src.data_filter_engine import FilterCriteria
from src.utils.error_handler import DataImportError


class TestFilterConfig:
    """Test FilterConfig data class."""
    
    def test_init_minimal(self):
        """Test FilterConfig with minimal parameters."""
        config = FilterConfig(preset_name="My Filter")
        
        assert config.preset_name == "My Filter"
        assert config.start_date is None
        assert config.end_date is None
        assert config.source_names is None
        assert config.health_types is None
        assert config.is_default is False
        assert config.is_last_used is False
        assert config.id is None
        assert config.created_at is None
        assert config.updated_at is None
    
    def test_init_full(self):
        """Test FilterConfig with all parameters."""
        now = datetime.now()
        config = FilterConfig(
            preset_name="Complete Filter",
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            source_names=['iPhone', 'Apple Watch'],
            health_types=['StepCount', 'HeartRate'],
            is_default=True,
            is_last_used=True,
            id=1,
            created_at=now,
            updated_at=now
        )
        
        assert config.preset_name == "Complete Filter"
        assert config.start_date == date(2024, 1, 1)
        assert config.end_date == date(2024, 12, 31)
        assert 'iPhone' in config.source_names
        assert 'StepCount' in config.health_types
        assert config.is_default is True
        assert config.is_last_used is True
        assert config.id == 1
        assert config.created_at == now
        assert config.updated_at == now
    
    def test_to_filter_criteria(self):
        """Test conversion to FilterCriteria."""
        config = FilterConfig(
            preset_name="Test",
            start_date=date(2024, 1, 1),
            end_date=date(2024, 1, 31),
            source_names=['iPhone'],
            health_types=['StepCount']
        )
        
        criteria = config.to_filter_criteria()
        
        assert isinstance(criteria, FilterCriteria)
        assert criteria.start_date == date(2024, 1, 1)
        assert criteria.end_date == date(2024, 1, 31)
        assert criteria.source_names == ['iPhone']
        assert criteria.health_types == ['StepCount']
    
    def test_from_filter_criteria(self):
        """Test creation from FilterCriteria."""
        criteria = FilterCriteria(
            start_date=date(2024, 1, 1),
            end_date=date(2024, 1, 31),
            source_names=['iPhone'],
            health_types=['StepCount']
        )
        
        config = FilterConfig.from_filter_criteria(criteria, "Converted Filter")
        
        assert config.preset_name == "Converted Filter"
        assert config.start_date == date(2024, 1, 1)
        assert config.end_date == date(2024, 1, 31)
        assert config.source_names == ['iPhone']
        assert config.health_types == ['StepCount']
    
    def test_to_dict(self):
        """Test conversion to dictionary."""
        now = datetime.now()
        config = FilterConfig(
            preset_name="Test Filter",
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            source_names=['iPhone'],
            health_types=['StepCount'],
            is_default=True,
            is_last_used=False,
            id=1,
            created_at=now,
            updated_at=now
        )
        
        result = config.to_dict()
        
        assert result['preset_name'] == "Test Filter"
        assert result['start_date'] == '2024-01-01'
        assert result['end_date'] == '2024-12-31'
        assert result['source_names'] == ['iPhone']
        assert result['health_types'] == ['StepCount']
        assert result['is_default'] is True
        assert result['is_last_used'] is False
        assert result['id'] == 1
        assert result['created_at'] == now.isoformat()
        assert result['updated_at'] == now.isoformat()
    
    def test_to_dict_with_none_values(self):
        """Test to_dict with None date values."""
        config = FilterConfig(preset_name="Minimal")
        result = config.to_dict()
        
        assert result['start_date'] is None
        assert result['end_date'] is None
        assert result['created_at'] is None
        assert result['updated_at'] is None


class TestFilterConfigManager:
    """Test FilterConfigManager functionality."""
    
    @pytest.fixture
    def manager(self):
        """Create a FilterConfigManager instance."""
        with patch('src.filter_config_manager.DatabaseManager'):
            return FilterConfigManager()
    
    @patch('src.filter_config_manager.DatabaseManager')
    def test_init(self, mock_db_manager):
        """Test manager initialization."""
        manager = FilterConfigManager()
        assert manager.db_manager is not None
        mock_db_manager.assert_called_once()
    
    def test_save_config_new(self, manager):
        """Test saving a new configuration."""
        config = FilterConfig(
            preset_name="New Filter",
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            source_names=['iPhone'],
            health_types=['StepCount']
        )
        
        manager.db_manager.execute_command.return_value = 1
        
        config_id = manager.save_config(config)
        
        assert config_id == 1
        
        # Check the SQL call
        call_args = manager.db_manager.execute_command.call_args
        query = call_args[0][0]
        params = call_args[0][1]
        
        assert "INSERT INTO filter_configs" in query
        assert params[0] == "New Filter"
        assert params[1] == "2024-01-01"
        assert params[2] == "2024-12-31"
        assert json.loads(params[3]) == ['iPhone']
        assert json.loads(params[4]) == ['StepCount']
        assert params[5] is False  # is_default
        assert params[6] is False  # is_last_used
    
    def test_save_config_update(self, manager):
        """Test updating an existing configuration."""
        config = FilterConfig(
            id=5,
            preset_name="Updated Filter",
            start_date=date(2024, 2, 1),
            end_date=date(2024, 2, 29),
            source_names=['Apple Watch'],
            health_types=['HeartRate']
        )
        
        config_id = manager.save_config(config)
        
        assert config_id == 5
        
        # Check UPDATE was called
        call_args = manager.db_manager.execute_command.call_args
        query = call_args[0][0]
        params = call_args[0][1]
        
        assert "UPDATE filter_configs" in query
        assert params[0] == "Updated Filter"
        assert params[7] == 5  # ID at the end for WHERE clause
    
    def test_save_config_as_default(self, manager):
        """Test saving configuration as default."""
        config = FilterConfig(
            preset_name="Default Filter",
            is_default=True
        )
        
        manager.db_manager.execute_command.return_value = 1
        
        config_id = manager.save_config(config)
        
        # Should clear other defaults first
        calls = manager.db_manager.execute_command.call_args_list
        assert len(calls) == 2
        assert "UPDATE filter_configs SET is_default = FALSE" in calls[0][0][0]
    
    def test_save_config_as_last_used(self, manager):
        """Test saving configuration as last used."""
        config = FilterConfig(
            preset_name="Last Used",
            is_last_used=True
        )
        
        manager.db_manager.execute_command.return_value = 1
        
        config_id = manager.save_config(config)
        
        # Should clear other last_used first
        calls = manager.db_manager.execute_command.call_args_list
        assert len(calls) == 2
        assert "UPDATE filter_configs SET is_last_used = FALSE" in calls[0][0][0]
    
    def test_save_config_error(self, manager):
        """Test error handling when saving config."""
        config = FilterConfig(preset_name="Error Test")
        manager.db_manager.execute_command.side_effect = Exception("Database error")
        
        with pytest.raises(DataImportError, match="Failed to save filter configuration"):
            manager.save_config(config)
    
    def test_load_config(self, manager):
        """Test loading configuration by name."""
        mock_row = {
            'id': 1,
            'preset_name': 'Test Filter',
            'start_date': '2024-01-01',
            'end_date': '2024-12-31',
            'source_names': '["iPhone"]',
            'health_types': '["StepCount", "HeartRate"]',
            'is_default': 1,
            'is_last_used': 0,
            'created_at': '2024-01-01T10:00:00',
            'updated_at': '2024-01-01T10:00:00'
        }
        
        manager.db_manager.execute_query.return_value = [mock_row]
        
        config = manager.load_config('Test Filter')
        
        assert config is not None
        assert config.id == 1
        assert config.preset_name == 'Test Filter'
        assert config.start_date == date(2024, 1, 1)
        assert config.end_date == date(2024, 12, 31)
        assert config.source_names == ['iPhone']
        assert config.health_types == ['StepCount', 'HeartRate']
        assert config.is_default is True
        assert config.is_last_used is False
    
    def test_load_config_not_found(self, manager):
        """Test loading non-existent configuration."""
        manager.db_manager.execute_query.return_value = []
        
        config = manager.load_config('Nonexistent')
        assert config is None
    
    def test_load_config_error(self, manager):
        """Test error handling when loading config."""
        manager.db_manager.execute_query.side_effect = Exception("Query error")
        
        config = manager.load_config('Test')
        assert config is None
    
    def test_load_config_by_id(self, manager):
        """Test loading configuration by ID."""
        mock_row = {
            'id': 5,
            'preset_name': 'ID Test',
            'start_date': None,
            'end_date': None,
            'source_names': None,
            'health_types': None,
            'is_default': 0,
            'is_last_used': 0,
            'created_at': None,
            'updated_at': None
        }
        
        manager.db_manager.execute_query.return_value = [mock_row]
        
        config = manager.load_config_by_id(5)
        
        assert config is not None
        assert config.id == 5
        assert config.preset_name == 'ID Test'
        assert config.start_date is None
        assert config.source_names is None
    
    def test_get_default_config(self, manager):
        """Test getting default configuration."""
        mock_row = {
            'id': 1,
            'preset_name': 'Default',
            'start_date': '2024-01-01',
            'end_date': '2024-12-31',
            'source_names': '["iPhone"]',
            'health_types': '["StepCount"]',
            'is_default': 1,
            'is_last_used': 0,
            'created_at': '2024-01-01T10:00:00',
            'updated_at': '2024-01-01T10:00:00'
        }
        
        manager.db_manager.execute_query.return_value = [mock_row]
        
        config = manager.get_default_config()
        
        assert config is not None
        assert config.is_default is True
        assert config.preset_name == 'Default'
    
    def test_get_default_config_none(self, manager):
        """Test getting default when none set."""
        manager.db_manager.execute_query.return_value = []
        
        config = manager.get_default_config()
        assert config is None
    
    def test_get_last_used_config(self, manager):
        """Test getting last used configuration."""
        mock_row = {
            'id': 2,
            'preset_name': '__last_used__',
            'start_date': '2024-01-15',
            'end_date': '2024-01-15',
            'source_names': '["Apple Watch"]',
            'health_types': '["HeartRate"]',
            'is_default': 0,
            'is_last_used': 1,
            'created_at': '2024-01-15T10:00:00',
            'updated_at': '2024-01-15T10:00:00'
        }
        
        manager.db_manager.execute_query.return_value = [mock_row]
        
        config = manager.get_last_used_config()
        
        assert config is not None
        assert config.is_last_used is True
        assert config.preset_name == '__last_used__'
    
    def test_list_configs(self, manager):
        """Test listing all configurations."""
        mock_rows = [
            {
                'id': 1,
                'preset_name': 'Config A',
                'start_date': '2024-01-01',
                'end_date': '2024-01-31',
                'source_names': '["iPhone"]',
                'health_types': '["StepCount"]',
                'is_default': 1,
                'is_last_used': 0,
                'created_at': '2024-01-01T10:00:00',
                'updated_at': '2024-01-01T10:00:00'
            },
            {
                'id': 2,
                'preset_name': 'Config B',
                'start_date': '2024-02-01',
                'end_date': '2024-02-29',
                'source_names': '["Apple Watch"]',
                'health_types': '["HeartRate"]',
                'is_default': 0,
                'is_last_used': 1,
                'created_at': '2024-02-01T10:00:00',
                'updated_at': '2024-02-01T10:00:00'
            }
        ]
        
        manager.db_manager.execute_query.return_value = mock_rows
        
        configs = manager.list_configs()
        
        assert len(configs) == 2
        assert configs[0].preset_name == 'Config A'
        assert configs[1].preset_name == 'Config B'
        assert configs[0].is_default is True
        assert configs[1].is_last_used is True
    
    def test_list_configs_error(self, manager):
        """Test error handling when listing configs."""
        manager.db_manager.execute_query.side_effect = Exception("Query error")
        
        configs = manager.list_configs()
        assert configs == []
    
    def test_delete_config(self, manager):
        """Test deleting a configuration."""
        manager.db_manager.execute_command.return_value = 1
        
        result = manager.delete_config('Test Filter')
        
        assert result is True
        
        call_args = manager.db_manager.execute_command.call_args
        query = call_args[0][0]
        params = call_args[0][1]
        
        assert "DELETE FROM filter_configs" in query
        assert params[0] == 'Test Filter'
    
    def test_delete_config_not_found(self, manager):
        """Test deleting non-existent config."""
        manager.db_manager.execute_command.return_value = 0
        
        result = manager.delete_config('Nonexistent')
        assert result is False
    
    def test_delete_config_error(self, manager):
        """Test error handling when deleting config."""
        manager.db_manager.execute_command.side_effect = Exception("Delete error")
        
        result = manager.delete_config('Test')
        assert result is False
    
    def test_set_as_default(self, manager):
        """Test setting a configuration as default."""
        manager.db_manager.execute_command.return_value = 1
        
        result = manager.set_as_default('My Filter')
        
        assert result is True
        
        # Should have two calls - clear defaults, then set new default
        calls = manager.db_manager.execute_command.call_args_list
        assert len(calls) == 2
        assert "is_default = FALSE" in calls[0][0][0]
        assert "SET is_default = TRUE" in calls[1][0][0]
        assert calls[1][0][1][0] == 'My Filter'
    
    def test_set_as_default_not_found(self, manager):
        """Test setting non-existent config as default."""
        manager.db_manager.execute_command.side_effect = [None, 0]
        
        result = manager.set_as_default('Nonexistent')
        assert result is False
    
    def test_save_as_last_used(self, manager):
        """Test saving configuration as last used."""
        config = FilterConfig(
            preset_name="Current",
            start_date=date(2024, 1, 1),
            source_names=['iPhone']
        )
        
        manager.db_manager.execute_command.return_value = 1
        
        result = manager.save_as_last_used(config)
        
        assert result is True
        
        # Should have multiple calls
        calls = manager.db_manager.execute_command.call_args_list
        
        # Clear last_used flags
        assert any("is_last_used = FALSE" in call[0][0] for call in calls)
        
        # Delete existing __last_used__
        assert any("DELETE FROM filter_configs" in call[0][0] and 
                  call[0][1][0] == "__last_used__" for call in calls)
        
        # Insert new last_used
        assert any("INSERT INTO filter_configs" in call[0][0] for call in calls)
    
    def test_save_as_last_used_error(self, manager):
        """Test error handling when saving last used."""
        config = FilterConfig(preset_name="Error")
        manager.db_manager.execute_command.side_effect = Exception("Save error")
        
        result = manager.save_as_last_used(config)
        assert result is False
    
    def test_clear_default_flags(self, manager):
        """Test clearing default flags."""
        manager._clear_default_flags()
        
        call_args = manager.db_manager.execute_command.call_args
        query = call_args[0][0]
        
        assert "UPDATE filter_configs" in query
        assert "SET is_default = FALSE" in query
        assert "WHERE is_default = TRUE" in query
    
    def test_clear_last_used_flags(self, manager):
        """Test clearing last_used flags."""
        manager._clear_last_used_flags()
        
        call_args = manager.db_manager.execute_command.call_args
        query = call_args[0][0]
        
        assert "UPDATE filter_configs" in query
        assert "SET is_last_used = FALSE" in query
        assert "WHERE is_last_used = TRUE" in query
    
    def test_row_to_config(self, manager):
        """Test converting database row to FilterConfig."""
        row = {
            'id': 10,
            'preset_name': 'Row Test',
            'start_date': '2024-03-01',
            'end_date': '2024-03-31',
            'source_names': '["iPhone", "Apple Watch"]',
            'health_types': '["StepCount", "HeartRate", "Distance"]',
            'is_default': 1,
            'is_last_used': 0,
            'created_at': '2024-03-01T10:00:00',
            'updated_at': '2024-03-01T15:30:00'
        }
        
        config = manager._row_to_config(row)
        
        assert config.id == 10
        assert config.preset_name == 'Row Test'
        assert config.start_date == date(2024, 3, 1)
        assert config.end_date == date(2024, 3, 31)
        assert config.source_names == ["iPhone", "Apple Watch"]
        assert config.health_types == ["StepCount", "HeartRate", "Distance"]
        assert config.is_default is True
        assert config.is_last_used is False
        assert isinstance(config.created_at, datetime)
        assert isinstance(config.updated_at, datetime)
    
    def test_row_to_config_with_nulls(self, manager):
        """Test converting row with null values."""
        row = {
            'id': 5,
            'preset_name': 'Minimal',
            'start_date': None,
            'end_date': None,
            'source_names': None,
            'health_types': None,
            'is_default': 0,
            'is_last_used': 0,
            'created_at': None,
            'updated_at': None
        }
        
        config = manager._row_to_config(row)
        
        assert config.id == 5
        assert config.preset_name == 'Minimal'
        assert config.start_date is None
        assert config.end_date is None
        assert config.source_names is None
        assert config.health_types is None
        assert config.is_default is False
        assert config.is_last_used is False
        assert config.created_at is None
        assert config.updated_at is None
    
    def test_migrate_from_json(self, manager):
        """Test migrating presets from JSON file."""
        # Create temporary JSON file
        json_data = {
            "Preset 1": {
                "start_date": "2024-01-01T00:00:00",
                "end_date": "2024-01-31T23:59:59",
                "devices": ["iPhone", "Apple Watch"],
                "metrics": ["StepCount", "HeartRate"]
            },
            "Preset 2": {
                "start_date": "2024-02-01T00:00:00",
                "end_date": "2024-02-29T23:59:59",
                "devices": ["Health App"],
                "metrics": ["Sleep"]
            }
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(json_data, f)
            temp_path = f.name
        
        try:
            manager.db_manager.execute_command.return_value = 1
            
            count = manager.migrate_from_json(temp_path)
            
            assert count == 2
            
            # Check that save_config was called for each preset
            calls = manager.db_manager.execute_command.call_args_list
            assert len(calls) >= 2  # At least 2 inserts
            
        finally:
            os.unlink(temp_path)
    
    def test_migrate_from_json_no_file(self, manager):
        """Test migration when JSON file doesn't exist."""
        count = manager.migrate_from_json('/nonexistent/file.json')
        assert count == 0
    
    def test_migrate_from_json_invalid_preset(self, manager):
        """Test migration with invalid preset data."""
        json_data = {
            "Valid Preset": {
                "start_date": "2024-01-01T00:00:00",
                "end_date": "2024-01-31T23:59:59",
                "devices": ["iPhone"],
                "metrics": ["StepCount"]
            },
            "Invalid Preset": {
                "start_date": "invalid_date",
                "devices": ["iPhone"]
            }
        }
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(json_data, f)
            temp_path = f.name
        
        try:
            manager.db_manager.execute_command.return_value = 1
            
            count = manager.migrate_from_json(temp_path)
            
            # Should migrate only the valid preset
            assert count == 1
            
        finally:
            os.unlink(temp_path)
    
    def test_migrate_from_json_error(self, manager):
        """Test error handling during migration."""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            f.write("invalid json content")
            temp_path = f.name
        
        try:
            count = manager.migrate_from_json(temp_path)
            assert count == 0
            
        finally:
            os.unlink(temp_path)


class TestIntegration:
    """Integration tests for filter configuration management."""
    
    @patch('src.filter_config_manager.DatabaseManager')
    def test_full_workflow(self, mock_db_manager_class):
        """Test complete filter configuration workflow."""
        mock_db = Mock()
        mock_db_manager_class.return_value = mock_db
        
        manager = FilterConfigManager()
        
        # Create and save a new configuration
        config = FilterConfig(
            preset_name="Workflow Test",
            start_date=date(2024, 1, 1),
            end_date=date(2024, 12, 31),
            source_names=['iPhone', 'Apple Watch'],
            health_types=['StepCount', 'HeartRate', 'Distance']
        )
        
        mock_db.execute_command.return_value = 1
        config_id = manager.save_config(config)
        assert config_id == 1
        
        # Load the configuration
        mock_row = {
            'id': 1,
            'preset_name': 'Workflow Test',
            'start_date': '2024-01-01',
            'end_date': '2024-12-31',
            'source_names': '["iPhone", "Apple Watch"]',
            'health_types': '["StepCount", "HeartRate", "Distance"]',
            'is_default': 0,
            'is_last_used': 0,
            'created_at': '2024-01-01T10:00:00',
            'updated_at': '2024-01-01T10:00:00'
        }
        mock_db.execute_query.return_value = [mock_row]
        
        loaded_config = manager.load_config('Workflow Test')
        assert loaded_config is not None
        assert loaded_config.preset_name == 'Workflow Test'
        
        # Set as default
        mock_db.execute_command.return_value = 1
        result = manager.set_as_default('Workflow Test')
        assert result is True
        
        # Get default config
        mock_row['is_default'] = 1
        mock_db.execute_query.return_value = [mock_row]
        
        default_config = manager.get_default_config()
        assert default_config is not None
        assert default_config.is_default is True
        
        # List all configs
        configs = manager.list_configs()
        assert len(configs) == 1
        
        # Delete the config
        mock_db.execute_command.return_value = 1
        result = manager.delete_config('Workflow Test')
        assert result is True