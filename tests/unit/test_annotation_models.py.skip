"""Tests for annotation models."""

import pytest
from datetime import datetime, date
from unittest.mock import Mock, patch

from src.analytics.annotation_models import (
    AnnotationType, AnnotationPriority, AnnotationSource,
    Annotation, AnnotationCategory, AnnotationStyle,
    HealthAnnotation, AnnotationManager
)


class TestAnnotationEnums:
    """Test annotation enumeration types."""
    
    def test_annotation_type_enum(self):
        """Test AnnotationType enum values."""
        assert AnnotationType.EVENT.value == "event"
        assert AnnotationType.MILESTONE.value == "milestone"
        assert AnnotationType.INSIGHT.value == "insight"
        assert AnnotationType.GOAL.value == "goal"
        assert AnnotationType.REMINDER.value == "reminder"
    
    def test_annotation_priority_enum(self):
        """Test AnnotationPriority enum values."""
        assert AnnotationPriority.LOW.value == 1
        assert AnnotationPriority.MEDIUM.value == 2
        assert AnnotationPriority.HIGH.value == 3
        assert AnnotationPriority.CRITICAL.value == 4
    
    def test_annotation_source_enum(self):
        """Test AnnotationSource enum values."""
        assert AnnotationSource.USER.value == "user"
        assert AnnotationSource.SYSTEM.value == "system"
        assert AnnotationSource.AI_INSIGHT.value == "ai_insight"
        assert AnnotationSource.GOAL_TRACKER.value == "goal_tracker"


class TestAnnotationModels:
    """Test annotation model classes."""
    
    def test_annotation_style_creation(self):
        """Test AnnotationStyle creation."""
        style = AnnotationStyle(
            color="#FF5733",
            icon="star",
            font_size=12,
            font_weight="bold",
            background_color="#FFFFFF",
            border_color="#000000"
        )
        
        assert style.color == "#FF5733"
        assert style.icon == "star"
        assert style.font_size == 12
        assert style.font_weight == "bold"
    
    def test_annotation_category_creation(self):
        """Test AnnotationCategory creation."""
        category = AnnotationCategory(
            name="Health Milestones",
            color="#00FF00",
            icon="heart",
            description="Important health achievements"
        )
        
        assert category.name == "Health Milestones"
        assert category.color == "#00FF00"
        assert category.icon == "heart"
    
    def test_annotation_creation(self):
        """Test Annotation creation."""
        annotation = Annotation(
            id="ann_123",
            type=AnnotationType.MILESTONE,
            date=date(2024, 1, 15),
            title="10K Steps Achieved",
            description="First time reaching 10,000 steps in a day",
            priority=AnnotationPriority.HIGH,
            source=AnnotationSource.SYSTEM,
            category="achievement",
            tags=["steps", "milestone", "fitness"],
            metadata={"steps": 10542, "previous_best": 8934}
        )
        
        assert annotation.id == "ann_123"
        assert annotation.type == AnnotationType.MILESTONE
        assert annotation.date == date(2024, 1, 15)
        assert annotation.priority == AnnotationPriority.HIGH
        assert len(annotation.tags) == 3
        assert annotation.metadata["steps"] == 10542
    
    def test_health_annotation_creation(self):
        """Test HealthAnnotation creation."""
        health_ann = HealthAnnotation(
            id="health_ann_456",
            type=AnnotationType.INSIGHT,
            date=date(2024, 1, 20),
            title="Sleep Pattern Improved",
            description="Your sleep quality has improved by 15% this week",
            metric="sleep_quality",
            value=8.5,
            unit="score",
            trend="improving",
            comparison_period="week",
            significance_score=0.85
        )
        
        assert health_ann.metric == "sleep_quality"
        assert health_ann.value == 8.5
        assert health_ann.unit == "score"
        assert health_ann.trend == "improving"
        assert health_ann.significance_score == 0.85
    
    def test_annotation_with_style(self):
        """Test annotation with custom style."""
        custom_style = AnnotationStyle(
            color="#FF0000",
            icon="alert",
            font_size=14
        )
        
        annotation = Annotation(
            id="styled_ann",
            type=AnnotationType.REMINDER,
            date=date.today(),
            title="Health Checkup",
            description="Annual health checkup scheduled",
            style=custom_style
        )
        
        assert annotation.style.color == "#FF0000"
        assert annotation.style.icon == "alert"
        assert annotation.style.font_size == 14


class TestAnnotationManager:
    """Test AnnotationManager functionality."""
    
    @pytest.fixture
    def manager(self):
        """Create AnnotationManager instance."""
        return AnnotationManager()
    
    def test_add_annotation(self, manager):
        """Test adding annotations."""
        annotation = Annotation(
            id="test_1",
            type=AnnotationType.EVENT,
            date=date.today(),
            title="Test Event",
            description="Test description"
        )
        
        manager.add_annotation(annotation)
        assert len(manager.get_all_annotations()) == 1
        assert manager.get_annotation("test_1") == annotation
    
    def test_remove_annotation(self, manager):
        """Test removing annotations."""
        annotation = Annotation(
            id="test_2",
            type=AnnotationType.EVENT,
            date=date.today(),
            title="Test Event",
            description="Test description"
        )
        
        manager.add_annotation(annotation)
        assert len(manager.get_all_annotations()) == 1
        
        manager.remove_annotation("test_2")
        assert len(manager.get_all_annotations()) == 0
        assert manager.get_annotation("test_2") is None
    
    def test_get_annotations_by_date(self, manager):
        """Test getting annotations by date."""
        today = date.today()
        yesterday = date.today().replace(day=today.day - 1)
        
        ann1 = Annotation(id="1", type=AnnotationType.EVENT, date=today, 
                         title="Today's Event", description="")
        ann2 = Annotation(id="2", type=AnnotationType.EVENT, date=yesterday,
                         title="Yesterday's Event", description="")
        ann3 = Annotation(id="3", type=AnnotationType.EVENT, date=today,
                         title="Another Today Event", description="")
        
        manager.add_annotation(ann1)
        manager.add_annotation(ann2)
        manager.add_annotation(ann3)
        
        today_annotations = manager.get_annotations_by_date(today)
        assert len(today_annotations) == 2
        assert all(ann.date == today for ann in today_annotations)
    
    def test_get_annotations_by_date_range(self, manager):
        """Test getting annotations by date range."""
        start_date = date(2024, 1, 1)
        end_date = date(2024, 1, 31)
        
        # Add annotations across the month
        for day in range(1, 32):
            ann = Annotation(
                id=f"jan_{day}",
                type=AnnotationType.EVENT,
                date=date(2024, 1, day),
                title=f"Event {day}",
                description=""
            )
            manager.add_annotation(ann)
        
        # Get annotations for first week
        week_annotations = manager.get_annotations_by_date_range(
            date(2024, 1, 1), date(2024, 1, 7)
        )
        assert len(week_annotations) == 7
        
        # Get all January annotations
        month_annotations = manager.get_annotations_by_date_range(start_date, end_date)
        assert len(month_annotations) == 31
    
    def test_get_annotations_by_type(self, manager):
        """Test getting annotations by type."""
        ann1 = Annotation(id="1", type=AnnotationType.MILESTONE, date=date.today(),
                         title="Milestone", description="")
        ann2 = Annotation(id="2", type=AnnotationType.INSIGHT, date=date.today(),
                         title="Insight", description="")
        ann3 = Annotation(id="3", type=AnnotationType.MILESTONE, date=date.today(),
                         title="Another Milestone", description="")
        
        manager.add_annotation(ann1)
        manager.add_annotation(ann2)
        manager.add_annotation(ann3)
        
        milestones = manager.get_annotations_by_type(AnnotationType.MILESTONE)
        assert len(milestones) == 2
        assert all(ann.type == AnnotationType.MILESTONE for ann in milestones)
    
    def test_get_annotations_by_priority(self, manager):
        """Test getting annotations by priority."""
        ann1 = Annotation(id="1", type=AnnotationType.EVENT, date=date.today(),
                         title="Low", description="", priority=AnnotationPriority.LOW)
        ann2 = Annotation(id="2", type=AnnotationType.EVENT, date=date.today(),
                         title="High", description="", priority=AnnotationPriority.HIGH)
        ann3 = Annotation(id="3", type=AnnotationType.EVENT, date=date.today(),
                         title="Critical", description="", priority=AnnotationPriority.CRITICAL)
        
        manager.add_annotation(ann1)
        manager.add_annotation(ann2)
        manager.add_annotation(ann3)
        
        high_priority = manager.get_annotations_by_priority(AnnotationPriority.HIGH)
        assert len(high_priority) == 2  # HIGH and CRITICAL
        assert all(ann.priority.value >= AnnotationPriority.HIGH.value for ann in high_priority)
    
    def test_search_annotations(self, manager):
        """Test searching annotations."""
        ann1 = Annotation(id="1", type=AnnotationType.EVENT, date=date.today(),
                         title="Doctor Visit", description="Annual checkup")
        ann2 = Annotation(id="2", type=AnnotationType.EVENT, date=date.today(),
                         title="Gym Session", description="Leg day workout")
        ann3 = Annotation(id="3", type=AnnotationType.EVENT, date=date.today(),
                         title="Doctor Appointment", description="Follow-up visit")
        
        manager.add_annotation(ann1)
        manager.add_annotation(ann2)
        manager.add_annotation(ann3)
        
        # Search for "doctor"
        doctor_annotations = manager.search_annotations("doctor")
        assert len(doctor_annotations) == 2
        assert all("doctor" in ann.title.lower() or "doctor" in ann.description.lower() 
                  for ann in doctor_annotations)
    
    def test_update_annotation(self, manager):
        """Test updating annotations."""
        original = Annotation(
            id="update_test",
            type=AnnotationType.EVENT,
            date=date.today(),
            title="Original Title",
            description="Original description"
        )
        
        manager.add_annotation(original)
        
        # Update the annotation
        updated = Annotation(
            id="update_test",
            type=AnnotationType.MILESTONE,  # Changed type
            date=date.today(),
            title="Updated Title",
            description="Updated description",
            priority=AnnotationPriority.HIGH  # Added priority
        )
        
        manager.update_annotation(updated)
        
        retrieved = manager.get_annotation("update_test")
        assert retrieved.title == "Updated Title"
        assert retrieved.type == AnnotationType.MILESTONE
        assert retrieved.priority == AnnotationPriority.HIGH
    
    def test_clear_annotations(self, manager):
        """Test clearing all annotations."""
        # Add multiple annotations
        for i in range(5):
            ann = Annotation(
                id=f"clear_{i}",
                type=AnnotationType.EVENT,
                date=date.today(),
                title=f"Event {i}",
                description=""
            )
            manager.add_annotation(ann)
        
        assert len(manager.get_all_annotations()) == 5
        
        manager.clear_annotations()
        assert len(manager.get_all_annotations()) == 0
    
    def test_export_import_annotations(self, manager):
        """Test exporting and importing annotations."""
        # Add test annotations
        ann1 = Annotation(id="1", type=AnnotationType.MILESTONE, date=date.today(),
                         title="Test 1", description="Description 1")
        ann2 = HealthAnnotation(id="2", type=AnnotationType.INSIGHT, date=date.today(),
                               title="Test 2", description="Description 2",
                               metric="steps", value=10000, unit="count")
        
        manager.add_annotation(ann1)
        manager.add_annotation(ann2)
        
        # Export annotations
        exported_data = manager.export_annotations()
        assert len(exported_data) == 2
        
        # Clear and import
        manager.clear_annotations()
        assert len(manager.get_all_annotations()) == 0
        
        manager.import_annotations(exported_data)
        assert len(manager.get_all_annotations()) == 2
        
        # Verify imported data
        imported_ann1 = manager.get_annotation("1")
        assert imported_ann1.title == "Test 1"
        
        imported_ann2 = manager.get_annotation("2")
        assert imported_ann2.title == "Test 2"
        if isinstance(imported_ann2, HealthAnnotation):
            assert imported_ann2.metric == "steps"