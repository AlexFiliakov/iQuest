"""Comprehensive tests for goal management system."""

import pytest
from datetime import date, datetime, timedelta
from unittest.mock import Mock, patch, MagicMock, call
import json
import pandas as pd
import numpy as np

from src.analytics.goal_management_system import (
    GoalManagementSystem, ProgressTracker, GoalSuggestionEngine
)
from src.analytics.goal_models import (
    Goal, GoalType, GoalStatus, GoalFrequency, GoalPriority,
    GoalProgress, GoalMilestone, GoalRecommendation
)
from src.analytics.goal_notification_integration import GoalNotificationBridge


class TestGoalModels:
    """Test goal model classes."""
    
    def test_goal_type_enum(self):
        """Test GoalType enumeration."""
        assert GoalType.DAILY_TARGET.value == "daily_target"
        assert GoalType.WEEKLY_TARGET.value == "weekly_target"
        assert GoalType.MONTHLY_TARGET.value == "monthly_target"
        assert GoalType.STREAK.value == "streak"
        assert GoalType.IMPROVEMENT.value == "improvement"
        
    def test_goal_status_enum(self):
        """Test GoalStatus enumeration."""
        assert GoalStatus.ACTIVE.value == "active"
        assert GoalStatus.COMPLETED.value == "completed"
        assert GoalStatus.PAUSED.value == "paused"
        assert GoalStatus.FAILED.value == "failed"
        
    def test_goal_frequency_enum(self):
        """Test GoalFrequency enumeration."""
        assert GoalFrequency.DAILY.value == "daily"
        assert GoalFrequency.WEEKLY.value == "weekly"
        assert GoalFrequency.MONTHLY.value == "monthly"
        assert GoalFrequency.CUSTOM.value == "custom"
        
    def test_goal_priority_enum(self):
        """Test GoalPriority enumeration."""
        assert GoalPriority.LOW.value == 1
        assert GoalPriority.MEDIUM.value == 2
        assert GoalPriority.HIGH.value == 3
        
    def test_goal_creation(self):
        """Test creating Goal instance."""
        goal = Goal(
            id="goal_123",
            user_id="user_456",
            metric_type="steps",
            goal_type=GoalType.DAILY_TARGET,
            target_value=10000,
            current_value=0,
            start_date=date(2023, 1, 1),
            end_date=date(2023, 12, 31),
            frequency=GoalFrequency.DAILY,
            status=GoalStatus.ACTIVE,
            priority=GoalPriority.HIGH,
            title="Daily Step Goal",
            description="Walk 10,000 steps every day",
            metadata={"reminder_time": "08:00"}
        )
        
        assert goal.id == "goal_123"
        assert goal.metric_type == "steps"
        assert goal.target_value == 10000
        assert goal.frequency == GoalFrequency.DAILY
        assert goal.status == GoalStatus.ACTIVE
        assert goal.metadata["reminder_time"] == "08:00"
        
    def test_goal_progress_creation(self):
        """Test creating GoalProgress instance."""
        progress = GoalProgress(
            goal_id="goal_123",
            date=date(2023, 1, 15),
            value=8500,
            target=10000,
            percentage=85.0,
            is_completed=False,
            streak_count=5,
            days_remaining=350
        )
        
        assert progress.goal_id == "goal_123"
        assert progress.percentage == 85.0
        assert progress.is_completed is False
        assert progress.streak_count == 5
        
    def test_goal_milestone_creation(self):
        """Test creating GoalMilestone instance."""
        milestone = GoalMilestone(
            goal_id="goal_123",
            milestone_type="percentage",
            milestone_value=50,
            achieved_date=date(2023, 6, 15),
            celebration_message="Halfway there! Keep it up!"
        )
        
        assert milestone.milestone_type == "percentage"
        assert milestone.milestone_value == 50
        assert milestone.celebration_message == "Halfway there! Keep it up!"
        
    def test_goal_recommendation_creation(self):
        """Test creating GoalRecommendation instance."""
        recommendation = GoalRecommendation(
            metric_type="steps",
            recommended_target=8000,
            recommendation_type="achievable",
            confidence=0.85,
            reasoning="Based on your average of 7500 steps over the last month",
            adjustment_factor=1.07
        )
        
        assert recommendation.metric_type == "steps"
        assert recommendation.recommended_target == 8000
        assert recommendation.confidence == 0.85


class TestGoalManagementSystem:
    """Test the goal management system."""
    
    @pytest.fixture
    def system(self):
        """Create goal management system."""
        with patch('src.analytics.goal_management_system.db_manager'):
            system = GoalManagementSystem()
            return system
    
    @pytest.fixture
    def sample_goal(self):
        """Create a sample goal."""
        return Goal(
            id="test_goal_1",
            user_id="user_123",
            metric_type="steps",
            goal_type=GoalType.DAILY_TARGET,
            target_value=10000,
            current_value=0,
            start_date=date(2023, 1, 1),
            end_date=date(2023, 12, 31),
            frequency=GoalFrequency.DAILY,
            status=GoalStatus.ACTIVE,
            priority=GoalPriority.HIGH,
            title="Daily Steps",
            description="Walk 10,000 steps daily"
        )
    
    @pytest.fixture
    def health_data(self):
        """Create sample health data."""
        dates = pd.date_range(start='2023-01-01', periods=30, freq='D')
        steps = np.random.randint(7000, 12000, size=30)
        return pd.DataFrame({
            'date': dates,
            'value': steps,
            'type': 'steps'
        })
    
    def test_system_initialization(self, system):
        """Test system initialization."""
        assert system is not None
        assert hasattr(system, 'db_manager')
        assert hasattr(system, 'progress_tracker')
        assert hasattr(system, 'suggestion_engine')
        
    def test_create_goal(self, system, sample_goal):
        """Test creating a new goal."""
        with patch.object(system.db_manager, 'execute_query') as mock_db:
            mock_db.return_value = None
            
            goal_id = system.create_goal(sample_goal)
            
            assert goal_id == sample_goal.id
            mock_db.assert_called_once()
            
    def test_get_goal(self, system, sample_goal):
        """Test retrieving a goal."""
        with patch.object(system.db_manager, 'fetch_one') as mock_fetch:
            mock_fetch.return_value = {
                'id': sample_goal.id,
                'user_id': sample_goal.user_id,
                'metric_type': sample_goal.metric_type,
                'goal_type': sample_goal.goal_type.value,
                'target_value': sample_goal.target_value,
                'current_value': sample_goal.current_value,
                'start_date': sample_goal.start_date.isoformat(),
                'end_date': sample_goal.end_date.isoformat(),
                'frequency': sample_goal.frequency.value,
                'status': sample_goal.status.value,
                'priority': sample_goal.priority.value,
                'title': sample_goal.title,
                'description': sample_goal.description,
                'metadata': json.dumps({})
            }
            
            goal = system.get_goal(sample_goal.id)
            
            assert goal.id == sample_goal.id
            assert goal.metric_type == sample_goal.metric_type
            assert goal.target_value == sample_goal.target_value
            
    def test_update_goal(self, system, sample_goal):
        """Test updating a goal."""
        with patch.object(system.db_manager, 'execute_query') as mock_db:
            sample_goal.target_value = 12000
            sample_goal.priority = GoalPriority.MEDIUM
            
            success = system.update_goal(sample_goal)
            
            assert success is True
            mock_db.assert_called_once()
            
    def test_delete_goal(self, system):
        """Test deleting a goal."""
        with patch.object(system.db_manager, 'execute_query') as mock_db:
            success = system.delete_goal("goal_123")
            
            assert success is True
            mock_db.assert_called()
            
    def test_get_active_goals(self, system):
        """Test retrieving active goals."""
        mock_goals = [
            {
                'id': 'goal_1',
                'user_id': 'user_123',
                'metric_type': 'steps',
                'goal_type': 'daily_target',
                'target_value': 10000,
                'current_value': 0,
                'start_date': '2023-01-01',
                'end_date': '2023-12-31',
                'frequency': 'daily',
                'status': 'active',
                'priority': 3,
                'title': 'Daily Steps',
                'description': 'Walk daily',
                'metadata': '{}'
            }
        ]
        
        with patch.object(system.db_manager, 'fetch_all', return_value=mock_goals):
            goals = system.get_active_goals("user_123")
            
            assert len(goals) == 1
            assert goals[0].id == 'goal_1'
            assert goals[0].status == GoalStatus.ACTIVE
            
    def test_update_progress(self, system, sample_goal, health_data):
        """Test updating goal progress."""
        with patch.object(system, 'get_goal', return_value=sample_goal):
            with patch.object(system.db_manager, 'execute_query'):
                progress = system.update_progress(
                    goal_id=sample_goal.id,
                    current_data=health_data
                )
                
                assert isinstance(progress, GoalProgress)
                assert progress.goal_id == sample_goal.id
                
    def test_check_milestones(self, system, sample_goal):
        """Test milestone checking."""
        progress = GoalProgress(
            goal_id=sample_goal.id,
            date=date(2023, 6, 15),
            value=5000,
            target=10000,
            percentage=50.0,
            is_completed=False,
            streak_count=10,
            days_remaining=200
        )
        
        milestones = system.check_milestones(sample_goal, progress)
        
        # Should detect 50% milestone
        assert len(milestones) > 0
        fifty_percent = next((m for m in milestones if m.milestone_value == 50), None)
        assert fifty_percent is not None
        
    def test_get_goal_history(self, system):
        """Test retrieving goal progress history."""
        mock_history = [
            {
                'date': '2023-01-01',
                'value': 8000,
                'target': 10000,
                'percentage': 80.0,
                'is_completed': False
            },
            {
                'date': '2023-01-02',
                'value': 11000,
                'target': 10000,
                'percentage': 110.0,
                'is_completed': True
            }
        ]
        
        with patch.object(system.db_manager, 'fetch_all', return_value=mock_history):
            history = system.get_goal_history("goal_123", date(2023, 1, 1), date(2023, 1, 31))
            
            assert len(history) == 2
            assert history[1].is_completed is True
            
    def test_streak_calculation(self, system, sample_goal):
        """Test streak calculation."""
        # Create progress history with streak
        progress_history = []
        for i in range(10):
            progress_history.append(
                GoalProgress(
                    goal_id=sample_goal.id,
                    date=date(2023, 1, 1) + timedelta(days=i),
                    value=11000,  # Above target
                    target=10000,
                    percentage=110.0,
                    is_completed=True,
                    streak_count=i + 1,
                    days_remaining=365 - i
                )
            )
        
        with patch.object(system, 'get_goal_history', return_value=progress_history):
            streak = system.calculate_streak(sample_goal.id)
            assert streak == 10


class TestGoalProgressCalculator:
    """Test goal progress calculator."""
    
    @pytest.fixture
    def calculator(self):
        """Create progress calculator."""
        # ProgressTracker requires db_manager and health_db
        with patch('src.analytics.goal_management_system.DatabaseManager'), \
             patch('src.analytics.goal_management_system.HealthDatabase'):
            return ProgressTracker(Mock(), Mock())
    
    def test_calculate_daily_progress(self, calculator):
        """Test daily progress calculation."""
        goal = Goal(
            id="goal_1",
            user_id="user_1",
            metric_type="steps",
            goal_type=GoalType.DAILY_TARGET,
            target_value=10000,
            current_value=0,
            start_date=date(2023, 1, 1),
            end_date=date(2023, 12, 31),
            frequency=GoalFrequency.DAILY,
            status=GoalStatus.ACTIVE
        )
        
        current_value = 8500
        progress = calculator.calculate_progress(goal, current_value, date.today())
        
        assert progress.percentage == 85.0
        assert progress.value == 8500
        assert progress.target == 10000
        assert progress.is_completed is False
        
    def test_calculate_weekly_progress(self, calculator):
        """Test weekly progress calculation."""
        goal = Goal(
            id="goal_2",
            user_id="user_1",
            metric_type="exercise_minutes",
            goal_type=GoalType.WEEKLY_TARGET,
            target_value=150,
            current_value=0,
            start_date=date(2023, 1, 1),
            end_date=date(2023, 12, 31),
            frequency=GoalFrequency.WEEKLY,
            status=GoalStatus.ACTIVE
        )
        
        weekly_data = pd.DataFrame({
            'date': pd.date_range('2023-01-01', periods=7),
            'value': [30, 0, 45, 20, 0, 40, 25]
        })
        
        total_minutes = weekly_data['value'].sum()
        progress = calculator.calculate_progress(goal, total_minutes, date(2023, 1, 7))
        
        assert progress.value == 160
        assert progress.percentage > 100
        assert progress.is_completed is True
        
    def test_streak_progress(self, calculator):
        """Test streak goal progress."""
        goal = Goal(
            id="goal_3",
            user_id="user_1",
            metric_type="meditation_sessions",
            goal_type=GoalType.STREAK,
            target_value=30,  # 30-day streak
            current_value=0,
            start_date=date(2023, 1, 1),
            end_date=date(2023, 12, 31),
            frequency=GoalFrequency.DAILY,
            status=GoalStatus.ACTIVE
        )
        
        current_streak = 15
        progress = calculator.calculate_progress(goal, current_streak, date(2023, 1, 15))
        
        assert progress.value == 15
        assert progress.percentage == 50.0
        assert progress.streak_count == 15
        
    def test_improvement_goal_progress(self, calculator):
        """Test improvement goal progress."""
        goal = Goal(
            id="goal_4",
            user_id="user_1",
            metric_type="resting_heart_rate",
            goal_type=GoalType.IMPROVEMENT,
            target_value=-5,  # Reduce by 5 bpm
            current_value=70,  # Starting value
            start_date=date(2023, 1, 1),
            end_date=date(2023, 12, 31),
            frequency=GoalFrequency.MONTHLY,
            status=GoalStatus.ACTIVE
        )
        
        current_hr = 67  # Reduced by 3
        progress = calculator.calculate_progress(goal, current_hr, date(2023, 6, 1))
        
        # Improved by 3 out of target 5 = 60%
        assert progress.percentage == 60.0


class TestGoalRecommendationEngine:
    """Test goal recommendation engine."""
    
    @pytest.fixture
    def engine(self):
        """Create recommendation engine."""
        # GoalSuggestionEngine requires health_db and calculators
        with patch('src.analytics.goal_management_system.HealthDatabase'), \
             patch('src.analytics.goal_management_system.DailyMetricsCalculator'), \
             patch('src.analytics.goal_management_system.WeeklyMetricsCalculator'), \
             patch('src.analytics.goal_management_system.MonthlyMetricsCalculator'):
            return GoalSuggestionEngine(Mock(), Mock(), Mock(), Mock())
    
    @pytest.fixture
    def historical_data(self):
        """Create historical health data."""
        dates = pd.date_range(start='2023-01-01', periods=90, freq='D')
        # Simulate improving trend
        base_steps = 7000
        steps = []
        for i in range(90):
            daily_steps = base_steps + (i * 20) + np.random.randint(-500, 500)
            steps.append(daily_steps)
            
        return pd.DataFrame({
            'date': dates,
            'value': steps,
            'type': 'steps'
        })
    
    def test_generate_recommendations(self, engine, historical_data):
        """Test recommendation generation."""
        # Mock the _get_metric_history method to return our test data
        with patch.object(engine, '_get_metric_history', return_value=historical_data):
            recommendations = engine.suggest_goals(
                metric="steps",
                user_profile=None
            )
        
        assert len(recommendations) > 0
        
        # Check recommendation properties
        for rec in recommendations:
            assert hasattr(rec, 'metric')
            assert rec.metric == "steps"
            assert rec.suggested_value > 0
            assert hasattr(rec, 'achievability_score')
            assert hasattr(rec, 'reasoning')
            
    def test_conservative_recommendation(self, engine):
        """Test conservative recommendations for beginners."""
        # Limited historical data
        sparse_data = pd.DataFrame({
            'date': pd.date_range('2023-01-01', periods=7),
            'value': [3000, 3500, 2800, 3200, 3100, 3400, 3300],
            'type': 'steps'
        })
        
        # GoalSuggestionEngine.suggest_goals takes metric and optional user_profile
        recommendations = engine.suggest_goals(
            metric="steps",
            user_profile={"recommendation_type": "conservative"}
        )
        
        assert len(recommendations) > 0
        # Should recommend achievable target based on current performance
        conservative_rec = recommendations[0]
        assert conservative_rec.suggested_value <= 4000  # Small increase
        
    def test_aggressive_recommendation(self, engine, historical_data):
        """Test aggressive recommendations for motivated users."""
        recommendations = engine.suggest_goals(
            metric="steps",
            user_profile={"recommendation_type": "aggressive"}
        )
        
        assert len(recommendations) > 0
        aggressive_rec = recommendations[0]
        # Should recommend challenging target
        # Check for aggressive recommendation
        assert aggressive_rec.suggested_value > historical_data['value'].mean() * 1.1
        
    def test_personalized_recommendations(self, engine):
        """Test personalized recommendations based on patterns."""
        # Create data with weekly pattern (lower on weekends)
        dates = pd.date_range('2023-01-01', periods=28)
        steps = []
        for date in dates:
            if date.weekday() < 5:  # Weekday
                steps.append(np.random.randint(8000, 10000))
            else:  # Weekend
                steps.append(np.random.randint(4000, 6000))
                
        pattern_data = pd.DataFrame({
            'date': dates,
            'value': steps,
            'type': 'steps'
        })
        
        recommendations = engine.suggest_goals(
            metric="steps",
            user_profile={"consider_patterns": True}
        )
        
        # Should recognize pattern and make appropriate recommendations
        assert len(recommendations) > 0
        assert any("pattern" in rec.reasoning.lower() or "weekend" in rec.reasoning.lower() 
                  for rec in recommendations)


class TestGoalNotificationIntegration:
    """Test goal notification integration."""
    
    @pytest.fixture
    def notification_manager(self):
        """Create notification manager."""
        return GoalNotificationBridge(Mock())
    
    def test_progress_notification(self, notification_manager):
        """Test progress update notifications."""
        goal = Goal(
            id="goal_1",
            user_id="user_1",
            metric_type="steps",
            goal_type=GoalType.DAILY_TARGET,
            target_value=10000,
            current_value=0,
            start_date=date.today(),
            end_date=date.today() + timedelta(days=30),
            frequency=GoalFrequency.DAILY,
            status=GoalStatus.ACTIVE,
            title="Daily Steps"
        )
        
        progress = GoalProgress(
            goal_id=goal.id,
            date=date.today(),
            value=7500,
            target=10000,
            percentage=75.0,
            is_completed=False,
            streak_count=5,
            days_remaining=30
        )
        
        notification = notification_manager.create_progress_notification(goal, progress)
        
        assert notification is not None
        assert "75%" in notification['message']
        assert notification['type'] == 'progress_update'
        
    def test_milestone_notification(self, notification_manager):
        """Test milestone achievement notifications."""
        milestone = GoalMilestone(
            goal_id="goal_1",
            milestone_type="streak",
            milestone_value=7,
            achieved_date=date.today(),
            celebration_message="One week streak! 🎉"
        )
        
        notification = notification_manager.create_milestone_notification(milestone)
        
        assert notification is not None
        assert "🎉" in notification['message']
        assert notification['type'] == 'milestone_achieved'
        assert notification['priority'] == 'high'
        
    def test_reminder_notification(self, notification_manager):
        """Test goal reminder notifications."""
        goal = Goal(
            id="goal_1",
            user_id="user_1",
            metric_type="water_intake",
            goal_type=GoalType.DAILY_TARGET,
            target_value=8,
            current_value=3,
            start_date=date.today(),
            end_date=date.today() + timedelta(days=30),
            frequency=GoalFrequency.DAILY,
            status=GoalStatus.ACTIVE,
            title="Daily Water Intake",
            metadata={"reminder_time": "14:00"}
        )
        
        notification = notification_manager.create_reminder_notification(goal, current_value=3)
        
        assert notification is not None
        assert "3" in notification['message'] and "8" in notification['message']
        assert notification['type'] == 'reminder'
        
    def test_completion_notification(self, notification_manager):
        """Test goal completion notifications."""
        goal = Goal(
            id="goal_1",
            user_id="user_1",
            metric_type="steps",
            goal_type=GoalType.DAILY_TARGET,
            target_value=10000,
            current_value=10000,
            start_date=date.today(),
            end_date=date.today(),
            frequency=GoalFrequency.DAILY,
            status=GoalStatus.COMPLETED,
            title="Daily Steps"
        )
        
        notification = notification_manager.create_completion_notification(goal)
        
        assert notification is not None
        assert notification['type'] == 'goal_completed'
        assert notification['priority'] == 'high'
        assert "Congratulations" in notification['message'] or "completed" in notification['message'].lower()


def test_goal_management_integration():
    """Test integration of goal management components."""
    # Create system
    with patch('src.analytics.goal_management_system.db_manager'):
        system = GoalManagementSystem()
    
    # Create a goal
    goal = Goal(
        id="integration_goal",
        user_id="test_user",
        metric_type="steps",
        goal_type=GoalType.DAILY_TARGET,
        target_value=10000,
        current_value=0,
        start_date=date.today(),
        end_date=date.today() + timedelta(days=30),
        frequency=GoalFrequency.DAILY,
        status=GoalStatus.ACTIVE,
        priority=GoalPriority.HIGH,
        title="Integration Test Goal"
    )
    
    # Mock database operations
    with patch.object(system.db_manager, 'execute_query'):
        with patch.object(system.db_manager, 'fetch_one') as mock_fetch:
            mock_fetch.return_value = {
                'id': goal.id,
                'user_id': goal.user_id,
                'metric_type': goal.metric_type,
                'goal_type': goal.goal_type.value,
                'target_value': goal.target_value,
                'current_value': goal.current_value,
                'start_date': goal.start_date.isoformat(),
                'end_date': goal.end_date.isoformat(),
                'frequency': goal.frequency.value,
                'status': goal.status.value,
                'priority': goal.priority.value,
                'title': goal.title,
                'description': goal.description,
                'metadata': '{}'
            }
            
            # Create goal
            goal_id = system.create_goal(goal)
            assert goal_id == goal.id
            
            # Update progress
            health_data = pd.DataFrame({
                'date': [date.today()],
                'value': [12000],
                'type': ['steps']
            })
            
            progress = system.update_progress(goal.id, health_data)
            assert progress.is_completed is True
            assert progress.percentage >= 100
            
            # Check milestones
            milestones = system.check_milestones(goal, progress)
            assert any(m.milestone_type == "completion" for m in milestones)