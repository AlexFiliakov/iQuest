"""Comprehensive tests for causality detector module."""

import pytest
from datetime import date, datetime, timedelta
from unittest.mock import Mock, patch, MagicMock
import pandas as pd
import numpy as np
from statsmodels.tsa.stattools import grangercausalitytests

from src.analytics.causality_detector import (
    CausalityDetector, CausalRelationship, CausalityType,
    CausalStrength, CausalNetwork, InterventionAnalysis
)


class TestCausalityModels:
    """Test causality model classes."""
    
    def test_causality_type_enum(self):
        """Test CausalityType enumeration."""
        assert CausalityType.GRANGER.value == "granger"
        assert CausalityType.TRANSFER_ENTROPY.value == "transfer_entropy"
        assert CausalityType.CONVERGENT_CROSS_MAPPING.value == "convergent_cross_mapping"
        assert CausalityType.STRUCTURAL_EQUATION.value == "structural_equation"
        
    def test_causal_strength_enum(self):
        """Test CausalStrength enumeration."""
        assert CausalStrength.NONE.value == 0
        assert CausalStrength.WEAK.value == 1
        assert CausalStrength.MODERATE.value == 2
        assert CausalStrength.STRONG.value == 3
        
    def test_causal_relationship_creation(self):
        """Test CausalRelationship creation."""
        relationship = CausalRelationship(
            cause="exercise_minutes",
            effect="sleep_quality",
            causality_type=CausalityType.GRANGER,
            strength=CausalStrength.MODERATE,
            lag_periods=1,
            p_value=0.03,
            effect_size=0.35,
            confidence=0.85,
            interpretation="Exercise today improves tomorrow's sleep quality"
        )
        
        assert relationship.cause == "exercise_minutes"
        assert relationship.effect == "sleep_quality"
        assert relationship.lag_periods == 1
        assert relationship.is_significant(alpha=0.05) is True
        
    def test_causal_network_creation(self):
        """Test CausalNetwork creation."""
        relationships = [
            CausalRelationship(
                cause="exercise",
                effect="sleep",
                causality_type=CausalityType.GRANGER,
                strength=CausalStrength.MODERATE,
                lag_periods=1,
                p_value=0.02
            ),
            CausalRelationship(
                cause="sleep",
                effect="mood",
                causality_type=CausalityType.GRANGER,
                strength=CausalStrength.STRONG,
                lag_periods=0,
                p_value=0.01
            )
        ]
        
        network = CausalNetwork(
            nodes=["exercise", "sleep", "mood"],
            relationships=relationships,
            network_type="directed_acyclic",
            metadata={"analysis_date": date.today()}
        )
        
        assert len(network.nodes) == 3
        assert len(network.relationships) == 2
        assert network.network_type == "directed_acyclic"
        
    def test_intervention_analysis(self):
        """Test InterventionAnalysis creation."""
        analysis = InterventionAnalysis(
            intervention_variable="exercise_minutes",
            target_variable="resting_heart_rate",
            intervention_date=date(2023, 6, 1),
            pre_intervention_mean=72,
            post_intervention_mean=68,
            effect_size=-4,
            significance=0.001,
            causal_impact={
                "immediate": -2,
                "sustained": -4,
                "confidence_interval": (-5, -3)
            }
        )
        
        assert analysis.effect_size == -4
        assert analysis.is_significant(alpha=0.01) is True
        assert analysis.causal_impact["sustained"] == -4


class TestCausalityDetector:
    """Test causality detection functionality."""
    
    @pytest.fixture
    def detector(self):
        """Create causality detector."""
        return CausalityDetector()
    
    @pytest.fixture
    def time_series_data(self):
        """Create time series data with causal relationships."""
        np.random.seed(42)
        n_points = 200
        
        # Create causal chain: X -> Y -> Z
        X = np.random.normal(0, 1, n_points)
        
        # Y depends on lagged X
        Y = np.zeros(n_points)
        Y[0] = np.random.normal(0, 0.5)
        for t in range(1, n_points):
            Y[t] = 0.7 * X[t-1] + 0.3 * Y[t-1] + np.random.normal(0, 0.5)
        
        # Z depends on lagged Y
        Z = np.zeros(n_points)
        Z[0] = np.random.normal(0, 0.5)
        for t in range(1, n_points):
            Z[t] = 0.6 * Y[t-1] + 0.2 * Z[t-1] + np.random.normal(0, 0.5)
        
        dates = pd.date_range('2023-01-01', periods=n_points, freq='D')
        
        return pd.DataFrame({
            'date': dates,
            'X': X,
            'Y': Y,
            'Z': Z
        })
    
    @pytest.fixture
    def health_causality_data(self):
        """Create health data with realistic causal relationships."""
        np.random.seed(42)
        n_days = 180
        
        # Sleep affects next day's energy
        sleep_hours = np.random.normal(7.5, 1, n_days)
        energy_level = np.zeros(n_days)
        energy_level[0] = 5
        
        for i in range(1, n_days):
            # Energy depends on previous night's sleep
            sleep_effect = (sleep_hours[i-1] - 6) * 2  # More sleep -> more energy
            energy_level[i] = np.clip(3 + sleep_effect + np.random.normal(0, 1), 1, 10)
        
        # Energy affects exercise
        exercise_minutes = np.zeros(n_days)
        for i in range(n_days):
            # Higher energy -> more exercise
            exercise_minutes[i] = np.clip(
                energy_level[i] * 6 + np.random.normal(0, 10),
                0, 90
            )
        
        # Exercise affects next day's sleep quality
        sleep_quality = np.zeros(n_days)
        sleep_quality[0] = 0.7
        
        for i in range(1, n_days):
            # Exercise improves sleep quality
            exercise_effect = exercise_minutes[i-1] / 60 * 0.2
            sleep_quality[i] = np.clip(
                0.6 + exercise_effect + np.random.normal(0, 0.1),
                0, 1
            )
        
        dates = pd.date_range('2023-01-01', periods=n_days, freq='D')
        
        return pd.DataFrame({
            'date': dates,
            'sleep_hours': sleep_hours,
            'energy_level': energy_level,
            'exercise_minutes': exercise_minutes,
            'sleep_quality': sleep_quality
        })
    
    def test_granger_causality(self, detector, time_series_data):
        """Test Granger causality detection."""
        result = detector.test_granger_causality(
            data=time_series_data,
            cause='X',
            effect='Y',
            max_lag=5
        )
        
        assert isinstance(result, CausalRelationship)
        assert result.causality_type == CausalityType.GRANGER
        assert result.cause == 'X'
        assert result.effect == 'Y'
        
        # Should detect causality at lag 1
        assert result.lag_periods == 1
        assert result.p_value < 0.05
        assert result.strength != CausalStrength.NONE
        
    def test_no_causality(self, detector):
        """Test when no causality exists."""
        # Create independent time series
        n = 100
        data = pd.DataFrame({
            'date': pd.date_range('2023-01-01', periods=n),
            'random1': np.random.normal(0, 1, n),
            'random2': np.random.normal(0, 1, n)
        })
        
        result = detector.test_granger_causality(
            data=data,
            cause='random1',
            effect='random2',
            max_lag=5
        )
        
        assert result.strength == CausalStrength.NONE or result.p_value > 0.05
        
    def test_bidirectional_causality(self, detector):
        """Test detection of bidirectional causality."""
        # Create feedback loop: X <-> Y
        n = 150
        X = np.zeros(n)
        Y = np.zeros(n)
        
        X[0] = np.random.normal(0, 1)
        Y[0] = np.random.normal(0, 1)
        
        for t in range(1, n):
            X[t] = 0.5 * Y[t-1] + 0.3 * X[t-1] + np.random.normal(0, 0.5)
            Y[t] = 0.4 * X[t-1] + 0.4 * Y[t-1] + np.random.normal(0, 0.5)
        
        data = pd.DataFrame({
            'date': pd.date_range('2023-01-01', periods=n),
            'X': X,
            'Y': Y
        })
        
        # Test X -> Y
        result_xy = detector.test_granger_causality(data, 'X', 'Y')
        # Test Y -> X
        result_yx = detector.test_granger_causality(data, 'Y', 'X')
        
        # Both should show causality
        assert result_xy.p_value < 0.05
        assert result_yx.p_value < 0.05
        
    def test_causal_network_discovery(self, detector, health_causality_data):
        """Test discovering causal network from data."""
        variables = ['sleep_hours', 'energy_level', 'exercise_minutes', 'sleep_quality']
        
        network = detector.discover_causal_network(
            data=health_causality_data,
            variables=variables,
            method=CausalityType.GRANGER,
            max_lag=3
        )
        
        assert isinstance(network, CausalNetwork)
        assert set(network.nodes) == set(variables)
        assert len(network.relationships) > 0
        
        # Should find sleep -> energy relationship
        sleep_energy = next(
            (r for r in network.relationships 
             if r.cause == 'sleep_hours' and r.effect == 'energy_level'),
            None
        )
        assert sleep_energy is not None
        assert sleep_energy.lag_periods == 1
        
        # Should find energy -> exercise relationship
        energy_exercise = next(
            (r for r in network.relationships 
             if r.cause == 'energy_level' and r.effect == 'exercise_minutes'),
            None
        )
        assert energy_exercise is not None
        
    def test_transfer_entropy(self, detector, time_series_data):
        """Test transfer entropy causality measure."""
        with patch.object(detector, '_calculate_transfer_entropy') as mock_te:
            mock_te.return_value = (0.25, 0.02)  # (TE value, p-value)
            
            result = detector.test_transfer_entropy(
                data=time_series_data,
                cause='X',
                effect='Y',
                lag=1
            )
            
            assert result.causality_type == CausalityType.TRANSFER_ENTROPY
            assert result.effect_size == 0.25
            assert result.p_value == 0.02
            
    def test_intervention_analysis(self, detector):
        """Test intervention analysis."""
        # Create data with intervention
        n_days = 120
        intervention_day = 60
        
        # Pre-intervention: low exercise
        pre_exercise = np.random.normal(15, 5, intervention_day)
        # Post-intervention: increased exercise
        post_exercise = np.random.normal(45, 10, n_days - intervention_day)
        
        exercise = np.concatenate([pre_exercise, post_exercise])
        
        # Resting heart rate responds to exercise
        resting_hr = np.zeros(n_days)
        base_hr = 72
        
        for i in range(n_days):
            # More exercise -> lower heart rate (with some lag)
            if i == 0:
                resting_hr[i] = base_hr
            else:
                exercise_effect = -0.1 * exercise[i-1]
                resting_hr[i] = base_hr + exercise_effect + np.random.normal(0, 2)
        
        data = pd.DataFrame({
            'date': pd.date_range('2023-01-01', periods=n_days),
            'exercise_minutes': exercise,
            'resting_heart_rate': resting_hr
        })
        
        analysis = detector.analyze_intervention(
            data=data,
            intervention_variable='exercise_minutes',
            target_variable='resting_heart_rate',
            intervention_date=data['date'].iloc[intervention_day]
        )
        
        assert isinstance(analysis, InterventionAnalysis)
        assert analysis.pre_intervention_mean < 20  # Low exercise before
        assert analysis.post_intervention_mean > 40  # High exercise after
        assert analysis.effect_size < 0  # Heart rate decreased
        
    def test_causal_strength_classification(self, detector):
        """Test causal strength classification."""
        test_cases = [
            (0.8, 0.001, CausalStrength.STRONG),
            (0.4, 0.01, CausalStrength.MODERATE),
            (0.2, 0.04, CausalStrength.WEAK),
            (0.1, 0.2, CausalStrength.NONE)
        ]
        
        for effect_size, p_value, expected_strength in test_cases:
            strength = detector._classify_causal_strength(effect_size, p_value)
            assert strength == expected_strength
            
    def test_lag_optimization(self, detector, time_series_data):
        """Test optimal lag detection."""
        optimal_lag = detector._find_optimal_lag(
            data=time_series_data,
            cause='X',
            effect='Y',
            max_lag=10
        )
        
        assert optimal_lag == 1  # Based on how we constructed the data
        
    def test_confounding_control(self, detector):
        """Test controlling for confounding variables."""
        # Create data where Z confounds X->Y relationship
        n = 200
        Z = np.random.normal(0, 1, n)  # Confounder
        X = 0.7 * Z + np.random.normal(0, 0.5, n)
        Y = 0.8 * Z + 0.2 * X + np.random.normal(0, 0.5, n)
        
        data = pd.DataFrame({
            'date': pd.date_range('2023-01-01', periods=n),
            'X': X,
            'Y': Y,
            'Z': Z
        })
        
        # Without controlling for Z
        uncontrolled = detector.test_granger_causality(
            data=data[['date', 'X', 'Y']],
            cause='X',
            effect='Y'
        )
        
        # With controlling for Z
        controlled = detector.test_granger_causality(
            data=data,
            cause='X',
            effect='Y',
            control_variables=['Z']
        )
        
        # Effect should be weaker when controlling for confounder
        assert controlled.effect_size < uncontrolled.effect_size


class TestCausalInsightGeneration:
    """Test causal insight generation."""
    
    @pytest.fixture
    def detector(self):
        """Create causality detector."""
        return CausalityDetector()
    
    def test_generate_causal_insights(self, detector):
        """Test generating insights from causal relationships."""
        relationships = [
            CausalRelationship(
                cause="sleep_hours",
                effect="energy_level",
                causality_type=CausalityType.GRANGER,
                strength=CausalStrength.STRONG,
                lag_periods=1,
                p_value=0.001,
                effect_size=0.7
            ),
            CausalRelationship(
                cause="stress_level",
                effect="sleep_quality",
                causality_type=CausalityType.GRANGER,
                strength=CausalStrength.MODERATE,
                lag_periods=0,
                p_value=0.02,
                effect_size=-0.4
            )
        ]
        
        insights = detector.generate_causal_insights(relationships)
        
        assert len(insights) >= 2
        
        # Check sleep insight
        sleep_insight = next(
            (i for i in insights if 'sleep' in i['cause'] and 'energy' in i['effect']),
            None
        )
        assert sleep_insight is not None
        assert 'recommendation' in sleep_insight
        assert sleep_insight['actionable'] is True
        
        # Check stress insight
        stress_insight = next(
            (i for i in insights if 'stress' in i['cause']),
            None
        )
        assert stress_insight is not None
        assert 'negative' in stress_insight['finding'] or 'reduce' in stress_insight['recommendation']
        
    def test_actionable_recommendations(self, detector):
        """Test generation of actionable recommendations."""
        network = CausalNetwork(
            nodes=['exercise', 'sleep', 'energy', 'mood'],
            relationships=[
                CausalRelationship(
                    cause="exercise",
                    effect="sleep",
                    causality_type=CausalityType.GRANGER,
                    strength=CausalStrength.MODERATE,
                    lag_periods=1,
                    p_value=0.01,
                    effect_size=0.3
                ),
                CausalRelationship(
                    cause="sleep",
                    effect="energy",
                    causality_type=CausalityType.GRANGER,
                    strength=CausalStrength.STRONG,
                    lag_periods=1,
                    p_value=0.001,
                    effect_size=0.6
                )
            ]
        )
        
        recommendations = detector.generate_recommendations(
            network=network,
            target_improvements=['energy', 'mood']
        )
        
        assert len(recommendations) > 0
        
        # Should recommend exercise to improve energy (via sleep)
        exercise_rec = next(
            (r for r in recommendations if 'exercise' in r['action'].lower()),
            None
        )
        assert exercise_rec is not None
        assert 'energy' in exercise_rec['expected_outcomes']


def test_causality_detection_integration():
    """Test integration of causality detection."""
    # Create detector
    detector = CausalityDetector()
    
    # Create comprehensive health data
    np.random.seed(42)
    n_days = 180
    dates = pd.date_range('2023-01-01', periods=n_days)
    
    # Build causal chain:
    # caffeine -> sleep -> next_day_energy -> exercise -> mood
    
    # Caffeine intake (mg)
    caffeine = np.random.choice([0, 100, 200, 300], n_days, p=[0.2, 0.4, 0.3, 0.1])
    
    # Sleep (affected by caffeine)
    sleep_hours = np.zeros(n_days)
    for i in range(n_days):
        base_sleep = 8
        caffeine_effect = -caffeine[i] / 100 * 0.5  # High caffeine reduces sleep
        sleep_hours[i] = np.clip(
            base_sleep + caffeine_effect + np.random.normal(0, 0.5),
            4, 10
        )
    
    # Next day energy (affected by previous night's sleep)
    energy = np.zeros(n_days)
    energy[0] = 5
    for i in range(1, n_days):
        sleep_effect = (sleep_hours[i-1] - 6) * 1.5
        energy[i] = np.clip(5 + sleep_effect + np.random.normal(0, 1), 1, 10)
    
    # Exercise (affected by energy)
    exercise = np.zeros(n_days)
    for i in range(n_days):
        energy_effect = energy[i] * 8
        exercise[i] = np.clip(energy_effect + np.random.normal(0, 10), 0, 90)
    
    # Mood (affected by exercise)
    mood = np.zeros(n_days)
    for i in range(n_days):
        exercise_effect = exercise[i] / 30
        mood[i] = np.clip(5 + exercise_effect + np.random.normal(0, 1), 1, 10)
    
    health_data = pd.DataFrame({
        'date': dates,
        'caffeine_mg': caffeine,
        'sleep_hours': sleep_hours,
        'energy_level': energy,
        'exercise_minutes': exercise,
        'mood_score': mood
    })
    
    # Discover causal network
    variables = ['caffeine_mg', 'sleep_hours', 'energy_level', 'exercise_minutes', 'mood_score']
    network = detector.discover_causal_network(
        data=health_data,
        variables=variables,
        method=CausalityType.GRANGER,
        max_lag=2
    )
    
    # Verify expected causal relationships
    # 1. Caffeine -> Sleep (same day)
    caffeine_sleep = next(
        (r for r in network.relationships 
         if r.cause == 'caffeine_mg' and r.effect == 'sleep_hours'),
        None
    )
    assert caffeine_sleep is not None
    assert caffeine_sleep.effect_size < 0  # Negative effect
    
    # 2. Sleep -> Energy (next day)
    sleep_energy = next(
        (r for r in network.relationships 
         if r.cause == 'sleep_hours' and r.effect == 'energy_level'),
        None
    )
    assert sleep_energy is not None
    assert sleep_energy.lag_periods == 1
    assert sleep_energy.effect_size > 0  # Positive effect
    
    # 3. Generate insights
    insights = detector.generate_causal_insights(network.relationships)
    
    # Should identify caffeine-sleep issue
    caffeine_insight = next(
        (i for i in insights if 'caffeine' in i['cause'].lower()),
        None
    )
    assert caffeine_insight is not None
    assert 'reduce' in caffeine_insight['recommendation'].lower()
    
    # 4. Intervention analysis
    # What if we reduce caffeine?
    intervention_date = dates[90]
    
    # Simulate intervention: reduce caffeine after day 90
    intervention_data = health_data.copy()
    intervention_data.loc[intervention_data['date'] >= intervention_date, 'caffeine_mg'] *= 0.5
    
    sleep_intervention = detector.analyze_intervention(
        data=intervention_data,
        intervention_variable='caffeine_mg',
        target_variable='sleep_hours',
        intervention_date=intervention_date
    )
    
    # Should show improved sleep
    assert sleep_intervention.effect_size > 0
    assert sleep_intervention.post_intervention_mean > sleep_intervention.pre_intervention_mean
    
    # 5. Generate recommendations for improving mood
    recommendations = detector.generate_recommendations(
        network=network,
        target_improvements=['mood_score'],
        current_data=health_data.tail(30)
    )
    
    assert len(recommendations) > 0
    # Should recommend reducing caffeine or increasing exercise
    assert any('caffeine' in r['action'].lower() or 'exercise' in r['action'].lower() 
              for r in recommendations)